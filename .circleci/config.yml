version: 2.1
jobs:
  build:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      container-image:
        type: string
      dir:
        type: string
        default: ""
      attach:
        type: boolean
        default: false
      targets:
        type: string
        default: ""
      resource-class:
        type: string
        default: medium
      scan:
        type: boolean
        default: false
    description: "build << parameters.container-image >>"
    working_directory: /app
    docker:
      - image: docker:stable
    resource_class: << parameters.resource-class >>
    steps:
      - run:
          name: Install tools
          command: |
            apk add --no-cache curl jq git
      - checkout
      - when:
          condition: << parameters.attach >>
          steps:
            - attach_workspace:
                at: /app/<< parameters.dir >>/workspace
      - setup_remote_docker
      - run:
          name: Check TAG files
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            image=<< parameters.container-image >>
            targets="<< parameters.targets >>"
            if [ "$targets" != "" ]; then
              for target in $targets; do break; done # get first element
              image=$image-$target
            fi
            c="$(./tag_exists $image $dir)"
            if [ "$c" = ng ]; then
                echo << parameters.container-image >> > BUILDS
            fi
      - run:
          name: Validate consistency between BRANCH and TAG
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            if [ -e "$dir/NO_TAG_BRANCH_CONSISTENCY" ]; then exit 0; fi
            ./tag_branch_consistency $dir
      - run:
          name: Build images
          no_output_timeout: 20m
          command: |
            if [ ! -f BUILDS ]; then
                echo "no need to build << parameters.container-image >>."
                exit 0
            fi
            echo "building << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker build -t quay.io/cybozu/<< parameters.container-image >>:latest $dir
            targets="<< parameters.targets >>"
            if [ "$targets" != "" ]; then
              for target in $targets; do
                docker build -t quay.io/cybozu/<< parameters.container-image >>-$target:latest --target $target $dir
              done
            fi
            docker images
      - deploy:
          name: Push Docker image to Quay.io
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo
            echo "pushing << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            targets="<< parameters.targets >>"
            if [ "$targets" = "" ]; then
              images=<< parameters.container-image >>
            else
              images=
              for target in $targets; do
                images="$images << parameters.container-image >>-$target"
              done
            fi
            TAG=$(cat $dir/TAG)
            for image in $images; do
              docker tag quay.io/cybozu/$image:latest quay.io/cybozu/$image:$TAG
              docker push quay.io/cybozu/$image:$TAG
            done
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            for image in $images; do
              if [ -f $dir/BRANCH ]; then
                  BRANCH=$(cat ${DIR}/BRANCH | xargs)
                  for b in $BRANCH; do
                    docker tag quay.io/cybozu/$image:$TAG quay.io/cybozu/$image:$b
                    docker push quay.io/cybozu/$image:$b
                  done
              fi
            done
      - when:
          condition: << parameters.scan >>
          steps:
            - run:
                name: Install Trivy
                command: |
                  curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            - run:
                name: Scan images
                command: |
                  if [ "${CIRCLE_BRANCH}" != "main" ]; then
                      exit 0
                  fi
                  if [ ! -f BUILDS ]; then
                      echo "no need to scan << parameters.container-image >>."
                      exit 0
                  fi

                  dir=<< parameters.dir >>
                  if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
                  targets="<< parameters.targets >>"
                  if [ "$targets" = "" ]; then
                      images=<< parameters.container-image >>
                  else
                      images=
                      for target in $targets; do
                          images="$images << parameters.container-image >>-$target"
                      done
                  fi
                  TAG=$(cat $dir/TAG)
                  for image in $images; do
                      echo "scanning $image:$TAG ..."
                      YAMORY_IMAGE_IDENTIFIER="quay.io/cybozu/$image" YAMORY_IMAGE_NAME="quay.io/cybozu/$image:$TAG" sh -c "$(curl -sSf -L https://mw-receiver.yamory.io/image/script/trivy)"
                  done

workflows:
  main:
    jobs:
      - build:
          name: build-gorush
          container-image: gorush
      - build:
          name: build-redis
          container-image: redis
