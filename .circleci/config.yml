version: 2.1
jobs:
  test:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      directory:
        type: string
    description: "test at << parameters.directory >>"
    docker:
      - image: quay.io/cybozu/golang:1.18-focal
      - image: quay.io/cybozu/etcd:3.4.16.1
    working_directory: /work
    steps:
      - checkout
      - run: apt-get update
      - run: make -C << parameters.directory >> check-generate SUDO=
      - run: make -C << parameters.directory >> test SUDO=
  build:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      container-image:
        type: string
      dir:
        type: string
        default: ""
      attach:
        type: boolean
        default: false
      targets:
        type: string
        default: ""
      resource-class:
        type: string
        default: medium
      suffix:
        type: string
        default: ""
    description: "build << parameters.container-image >>"
    working_directory: /app
    docker:
      - image: docker:stable
    resource_class: << parameters.resource-class >>
    steps:
      - run:
          name: Install tools
          command: |
            apk add --no-cache curl jq git
      - checkout
      - when:
          condition: << parameters.attach >>
          steps:
            - attach_workspace:
                at: /app/<< parameters.dir >>/workspace
      # Use docker 19.03.13 to fix the grafana build failure caused by statx system call not being allowed with default docker version 17.09.0
      # See https://github.com/docker/for-linux/issues/208 https://github.com/moby/moby/pull/36417
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Check TAG files
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            image=<< parameters.container-image >>
            targets="<< parameters.targets >>"
            if [ "$targets" != "" ]; then
              for target in $targets; do break; done # get first element
              image=$image-$target
            fi
            suffix=<< parameters.suffix >>
            c="$(./tag_exists $image $dir $suffix)"
            if [ "$c" = ng ]; then
                echo << parameters.container-image >> > BUILDS
            fi
      - run:
          name: Validate consistency between BRANCH and TAG
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            if [ -e "$dir/NO_TAG_BRANCH_CONSISTENCY" ]; then exit 0; fi
            ./tag_branch_consistency $dir
      - run:
          name: Build images
          no_output_timeout: 20m
          command: |
            if [ ! -f BUILDS ]; then
                echo "no need to build << parameters.container-image >>."
                exit 0
            fi
            echo "building << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker build -t quay.io/cybozu/<< parameters.container-image >>:latest $dir
            targets="<< parameters.targets >>"
            if [ "$targets" != "" ]; then
              for target in $targets; do
                docker build -t quay.io/cybozu/<< parameters.container-image >>-$target:latest --target $target $dir
              done
            fi
            docker images
      - deploy:
          name: Push Docker image to Quay.io
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo
            echo "pushing << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            targets="<< parameters.targets >>"
            if [ "$targets" = "" ]; then
              images=<< parameters.container-image >>
            else
              images=
              for target in $targets; do
                images="$images << parameters.container-image >>-$target"
              done
            fi
            TAG=$(cat $dir/TAG)<< parameters.suffix >>
            for image in $images; do
              docker tag quay.io/cybozu/$image:latest quay.io/cybozu/$image:$TAG
              docker push quay.io/cybozu/$image:$TAG
            done
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            for image in $images; do
              if [ -f $dir/BRANCH ]; then
                  BRANCH=$(cat $dir/BRANCH)
                  docker tag quay.io/cybozu/$image:$TAG quay.io/cybozu/$image:$BRANCH
                  docker push quay.io/cybozu/$image:$BRANCH
              fi
            done
  build-ceph:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:20.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            ceph_tag_exists="$(./tag_exists ceph)"
            if [ "$ceph_tag_exists" = ng ]; then
                echo ceph > BUILDS
            fi
      - run:
          name: Build Ceph packages
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
              # fake for the next step
              cd src/workspace
              touch COPYING
              exit 0
            fi
            ceph/build.sh << parameters.version >>
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-ceph-asan:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:20.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists ceph ceph -asan)"
            if [ "$c" = ng ]; then
                echo ceph-asan > BUILDS
            fi
      - run:
          name: Build Ceph packages with ASAN enabled
          no_output_timeout: 20m
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
              # fake for the next step
              cd src/workspace
              touch COPYING
              exit 0
            fi
            # set WITH_ASAN flag to ON
            ceph/build.sh -a << parameters.version >>
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-envoy:
    parameters:
      version:
        type: string
      bazel-version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:20.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists envoy)"
            if [ "$c" = ng ]; then
                echo envoy > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install build-essential \
              libtool \
              cmake \
              automake \
              autoconf \
              make \
              ninja-build \
              curl \
              unzip \
              virtualenv \
              zlib1g-dev
            ln -s $(which python3) /usr/local/bin/python
      - run:
          name: Install Bazel
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -o /tmp/bazel.deb -sLf https://github.com/bazelbuild/bazel/releases/download/<< parameters.bazel-version >>/bazel_<< parameters.bazel-version >>-linux-x86_64.deb
            dpkg -i /tmp/bazel.deb
            rm -f /tmp/bazel.deb
      - run:
          name: Build envoy
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch envoy LICENSE docker-entrypoint.sh
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> https://github.com/envoyproxy/envoy
            curl -o /tmp/clang.tar.xz -sLf https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz
            mkdir llvm
            tar -C llvm --strip-components=1 -xf /tmp/clang.tar.xz
            cd envoy
            bazel/setup_clang.sh $(pwd)/../llvm
            echo "build --config=clang" >> user.bazelrc
            bazel --bazelrc=/dev/null build --jobs=20 -c opt //source/exe:envoy-static.stripped
            mv bazel-bin/source/exe/envoy-static.stripped ../workspace/envoy
            mv LICENSE ../workspace
            mv ci/docker-entrypoint.sh ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-cilium-envoy:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:20.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists cilium)"
            if [ "$c" = ng ]; then
                echo cilium > BUILDS
            fi
      - run:
          name: Install package dependencies
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get install -y --no-install-recommends autoconf \
              automake \
              binutils \
              bison \
              build-essential \
              clang-10 \
              cmake \
              coreutils \
              curl \
              flex \
              g++ \
              gcc \
              git \
              libc6-dev \
              libelf-dev \
              libmnl-dev \
              libtool \
              lld-10 \
              llvm-10-dev \
              make \
              ninja-build \
              patch \
              pkg-config \
              python2 \
              python3 \
              python3-pip \
              unzip \
              virtualenv \
              wget \
              zip
            ln /usr/bin/clang-10 /usr/bin/clang
            ln /usr/bin/clang++-10 /usr/bin/clang++
            ln /usr/bin/lld-10 /usr/bin/lld
            update-alternatives --install /usr/bin/python python /usr/bin/python2 1
      - run:
          name: Download cilium/proxy
          command: |
            mkdir -p src/workspace/usr/bin src/cilium-proxy
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -sSLf https://github.com/cilium/proxy/archive/<< parameters.version >>.tar.gz | \
              tar zxf - --strip-components 1 -C src/cilium-proxy
      - run:
          name: Install bazel
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            BAZEL_VERSION="$(cat src/cilium-proxy/.bazelversion)"
            curl -o /tmp/bazel.deb -sfL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb
            dpkg -i /tmp/bazel.deb
            rm -rf /tmp/bazel.deb
      - run:
          name: Build cilium-envoy
          environment:
            BAZEL_BUILD_OPTS: "--remote_upload_local_results=false --disk_cache=/tmp/bazel-cache"
            PKG_BUILD: 1
            DESTDIR: /tmp/install
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            cd src/cilium-proxy
            echo "<< parameters.version >>" > SOURCE_VERSION
            make bazel-bin/cilium-envoy
            ./tools/get_workspace_status
            make install
            mv /tmp/install/usr/bin/cilium-envoy ../workspace/usr/bin/
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-cilium-image-tools:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:20.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists cilium)"
            if [ "$c" = ng ]; then
                echo cilium > BUILDS
            fi
      - run:
          name: Install package dependencies
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get install -y --no-install-recommends automake \
              binutils \
              bison \
              build-essential \
              cmake \
              curl \
              flex \
              g++ \
              gcc \
              git \
              libelf-dev \
              libmnl-dev \
              libtool \
              make \
              ninja-build \
              pkg-config \
              python2 \
              python3 \
              python3-pip \
              unzip
      - run:
          name: Download cilium/image-tools
          command: |
            mkdir -p src/workspace/bin src/workspace/usr/local/bin src/workspace/usr/lib src/image-tools
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -sSLf https://github.com/cilium/image-tools/archive/<< parameters.version >>.tar.gz | \
              tar zxf - --strip-components 1 -C src/image-tools
      - run:
          name: Build llvm
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            cd src/image-tools
            images/llvm/checkout-llvm.sh
            images/llvm/build-llvm-native.sh
            mv /out/linux/amd64/bin/clang /out/linux/amd64/bin/llc /out/linux/amd64/bin/llvm-objcopy ../workspace/bin
      - run:
          name: Build bpftool
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            cd src/image-tools
            images/bpftool/checkout-linux.sh
            images/bpftool/build-bpftool-native.sh
            mv /out/linux/amd64/bin/bpftool ../workspace/usr/local/bin/
      - run:
          name: Build iproute2
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            cd src/image-tools
            images/iproute2/checkout-libbpf.sh
            images/iproute2/build-libbpf-native.sh
            images/iproute2/checkout-iproute2.sh
            images/iproute2/build-iproute2-native.sh
            mv /out/linux/amd64/lib64/libbpf* ../workspace/usr/lib/
            mv /out/linux/amd64/bin/ip /out/linux/amd64/bin/tc /out/linux/amd64/bin/ss ../workspace/usr/local/bin/
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-cert-manager:
    parameters:
      repo:
        type: string
      version:
        type: string
    docker:
      - image: quay.io/cybozu/golang:1.19-focal
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists cert-manager)"
            if [ "$c" = ng ]; then
                echo cert-manager > BUILDS
            fi
      - run:
          name: Build cert-manager
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch cainjector controller webhook LICENSE
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> << parameters.repo >>
            cd cert-manager
            # We use a dummy environment value(CTR=sleep) to pass checks for unnecessary tools
            make CTR=sleep _bin/server/controller-linux-amd64
            make CTR=sleep _bin/server/webhook-linux-amd64
            make CTR=sleep _bin/server/cainjector-linux-amd64
            mv _bin/server/controller-linux-amd64 ../workspace/controller
            mv _bin/server/webhook-linux-amd64 ../workspace/webhook
            mv _bin/server/cainjector-linux-amd64 ../workspace/cainjector
            mv LICENSE ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-admission:
    docker:
      - image: quay.io/cybozu/golang:1.18-focal
    steps:
      - checkout
      - run: cd admission; make test
      - run: cd admission; make check-generate
      - run: cd admission; make build
      - persist_to_workspace:
          root: admission/bin
          paths:
            - neco-admission
  build-mysql:
    parameters:
      mysql-version:
        type: string
    docker:
      - image: quay.io/cybozu/golang:1.18-focal
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            d=<< parameters.mysql-version >>
            c="$(./tag_exists mysql mysql/$d)"
            if [ "$c" = ng ]; then
                echo mysql > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install cmake libncurses5-dev libjemalloc-dev libnuma-dev libaio-dev pkg-config
      - run:
          name: Build MySQL
          command: |
            if [ ! -f BUILDS ]; then
                # fake for the next step
                mkdir -p /usr/local/mysql
                cd /usr/local/mysql
                touch LICENSE
                mkdir bin lib share
                exit 0
            fi
            mkdir src
            cd src
            curl -fsSL -O https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-<< parameters.mysql-version >>.tar.gz
            tar -x -z -f mysql-boost-<< parameters.mysql-version >>.tar.gz
            cd mysql-<< parameters.mysql-version >>
            mkdir bld
            cd bld
            cmake .. -DBUILD_CONFIG=mysql_release -DCMAKE_BUILD_TYPE=Release -DWITH_BOOST=$(ls -d ../boost/boost_*) -DWITH_NUMA=1 -DWITH_JEMALLOC=1 -DWITH_PACKAGE_FLAGS=0
            make -j 20
            make install
      - run:
          name: Build moco-init
          command: |
            cd mysql/moco-init
            GOBIN=/usr/local/mysql/bin go install -ldflags="-w -s" .
      - persist_to_workspace:
          root: /usr/local/mysql
          paths:
            - LICENSE
            - bin
            - lib
            - share
  test-local-pv-provisioner:
    docker:
      - image: quay.io/cybozu/golang:1.17-focal
    steps:
      - checkout
      - run: cd local-pv-provisioner; make check-generate
      - run: cd local-pv-provisioner; make test

workflows:
  main:
    jobs:
      - test:
          name: test-bmc-reverse-proxy
          directory: bmc-reverse-proxy
      - test:
          name: test-ceph-extra-exporter
          directory: ceph-extra-exporter
      - test:
          name: test-envoy
          directory: envoy
      - test:
          name: test-golang-analyzer
          directory: golang/analyzer
      - test:
          name: test-golang-1.18-analyzer
          directory: golang-1.18/analyzer
      - test:
          name: test-golang-bionic-analyzer
          directory: golang-bionic/analyzer
      - test:
          name: test-heartbeat
          directory: heartbeat
      - test-local-pv-provisioner
      - test:
          name: test-machines-endpoints
          directory: machines-endpoints
      - test:
          name: test-moco-init
          directory: mysql/moco-init
      - test:
          name: test-s3gw
          directory: s3gw
      - test:
          name: test-testhttpd
          directory: testhttpd/src
      - build-admission
      - build:
          name: build-admission-image
          container-image: neco-admission
          dir: admission
          attach: true
          requires:
            - build-admission
      - build:
          name: build-alertmanager
          container-image: alertmanager
      - build:
          name: build-argocd
          container-image: argocd
      - build:
          name: build-bird
          container-image: bird
      - build:
          name: build-blackbox_exporter
          container-image: blackbox_exporter
      - build:
          name: build-bmc-reverse-proxy
          container-image: bmc-reverse-proxy
      - build:
          name: build-cadvisor
          container-image: cadvisor
      - build-ceph:
          version: 16.2.10
      - build:
          name: build-ceph-container
          container-image: ceph
          attach: true
          dir: ceph
          requires:
            - build-ceph
      - build-ceph-asan:
          version: 16.2.10
      - build:
          name: build-ceph-asan-container
          container-image: ceph
          attach: true
          dir: ceph
          suffix: "-asan"
          requires:
            - build-ceph-asan
      - build:
          name: build-ceph-extra-exporter
          container-image: ceph-extra-exporter
      - build:
          name: build-cephcsi
          container-image: cephcsi
      - build-cert-manager:
          #repo: https://github.com/cert-manager/cert-manager
          repo: https://github.com/cybozu-go/cert-manager
          version: 1.9.1-neco-longtimeout.1
      - build:
          name: build-cert-manager-container
          container-image: cert-manager
          attach: true
          dir: cert-manager
          requires:
            - build-cert-manager
      - build:
          name: build-chrony
          container-image: chrony
      - build-cilium-envoy:
          version: 3b70fad0b9514720f33db82841907821202c1f02
      - build-cilium-image-tools:
          version: a02254faffc6ceba53c2fa5a97d52f299cd693a6
      - build:
          name: build-cilium
          container-image: cilium
          attach: true
          dir: cilium
          requires:
            - build-cilium-envoy
            - build-cilium-image-tools
      - build:
          name: build-cilium-operator-generic
          container-image: cilium-operator-generic
      - build:
          name: build-cilium-certgen
          container-image: cilium-certgen
      - build:
          name: build-configmap-reload
          container-image: configmap-reload
      - build:
          name: build-contour
          container-image: contour
      - build:
          name: build-coredns
          container-image: coredns
      - build:
          name: build-csi-attacher
          container-image: csi-attacher
      - build:
          name: build-csi-node-driver-registrar
          container-image: csi-node-driver-registrar
      - build:
          name: build-csi-provisioner
          container-image: csi-provisioner
      - build:
          name: build-csi-resizer
          container-image: csi-resizer
      - build:
          name: build-csi-snapshotter
          container-image: csi-snapshotter
      - build:
          name: build-dex
          container-image: dex
      - build:
          name: build-dnsmasq
          container-image: dnsmasq
      - build-envoy:
          version: 1.19.5
          bazel-version: 4.1.0
      - build:
          name: build-envoy-container
          container-image: envoy
          attach: true
          dir: envoy
          requires:
            - build-envoy
      - build:
          name: build-etcd
          container-image: etcd
      - build:
          name: build-external-dns
          container-image: external-dns
      - build:
          name: build-fluent-bit
          container-image: fluent-bit
      - build:
          name: build-golang
          container-image: golang
      - build:
          name: build-golang-1.18
          container-image: golang
          dir: golang-1.18
      - build:
          name: build-golang-bionic
          container-image: golang
          dir: golang-bionic
      - build:
          name: build-gorush
          container-image: gorush
      - build:
          name: build-go-ipfs
          container-image: go-ipfs
      - build:
          name: build-grafana
          container-image: grafana
          resource-class: medium+
      - build:
          name: build-grafana_plugins_init
          container-image: grafana_plugins_init
      - build:
          name: build-grafana-operator
          container-image: grafana-operator
      - build:
          name: build-heartbeat
          container-image: heartbeat
      - build:
          name: build-hubble
          container-image: hubble
      - build:
          name: build-hubble-relay
          container-image: hubble-relay
      - build:
          name: build-hubble-ui
          container-image: hubble-ui
          targets: frontend backend
      - build:
          name: build-ipfs-cluster
          container-image: ipfs-cluster
      - build:
          name: build-kube-metrics-adapter
          container-image: kube-metrics-adapter
      - build:
          name: build-kube-state-metrics
          container-image: kube-state-metrics
      - build:
          name: build-kube-storage-version-migrator
          container-image: storage-version-migration
          dir: kube-storage-version-migrator
          targets: initializer migrator trigger
      - build:
          name: build-kubernetes
          container-image: kubernetes
      - build:
          name: build-local-pv-provisioner
          container-image: local-pv-provisioner
      - build:
          name: build-loki
          container-image: loki
      - build:
          name: build-machines-endpoints
          container-image: machines-endpoints
      - build:
          name: build-memcached
          container-image: memcached
      - build:
          name: build-memcached-exporter
          container-image: memcached-exporter
      - build:
          name: build-meows-dctest-runner
          container-image: meows-dctest-runner
      - build:
          name: build-meows-neco-runner
          container-image: meows-neco-runner
      - build:
          name: build-minio
          container-image: minio
      - build:
          name: build-minio-mc
          container-image: minio-mc
      - build-mysql:
          name: build-mysql-8018
          mysql-version: 8.0.18
      - build-mysql:
          name: build-mysql-8025
          mysql-version: 8.0.25
      - build-mysql:
          name: build-mysql-8026
          mysql-version: 8.0.26
      - build-mysql:
          name: build-mysql-8027
          mysql-version: 8.0.27
      - build-mysql:
          name: build-mysql-8028
          mysql-version: 8.0.28
      - build-mysql:
          name: build-mysql-8030
          mysql-version: 8.0.30
      - build:
          name: build-mysql-container-8018
          container-image: mysql
          attach: true
          dir: mysql/8.0.18
          requires:
            - build-mysql-8018
      - build:
          name: build-mysql-container-8025
          container-image: mysql
          attach: true
          dir: mysql/8.0.25
          requires:
            - build-mysql-8025
      - build:
          name: build-mysql-container-8026
          container-image: mysql
          attach: true
          dir: mysql/8.0.26
          requires:
            - build-mysql-8026
      - build:
          name: build-mysql-container-8027
          container-image: mysql
          attach: true
          dir: mysql/8.0.27
          requires:
            - build-mysql-8027
      - build:
          name: build-mysql-container-8028
          container-image: mysql
          attach: true
          dir: mysql/8.0.28
          requires:
            - build-mysql-8028
      - build:
          name: build-mysql-container-8030
          container-image: mysql
          attach: true
          dir: mysql/8.0.30
          requires:
            - build-mysql-8030
      - build:
          name: build-mysqld_exporter
          container-image: mysqld_exporter
      - build:
          name: build-nerdctl
          container-image: nerdctl
      - build:
          name: build-opentelemetry-collector
          container-image: opentelemetry-collector
      - build:
          name: build-pause
          container-image: pause
      - build:
          name: build-prometheus-adapter
          container-image: prometheus-adapter
      - build:
          name: build-prometheus-config-reloader
          container-image: prometheus-config-reloader
      - build:
          name: build-promtail
          container-image: promtail
      - build:
          name: build-pushgateway
          container-image: pushgateway
      - build:
          name: build-rclone
          container-image: rclone
      - build:
          name: build-redis
          container-image: redis
      - build:
          name: build-registry
          container-image: registry
      - build:
          name: build-rook
          container-image: rook
      - build:
          name: build-s3gw
          container-image: s3gw
      - build:
          name: build-sealed-secrets
          container-image: sealed-secrets
      - build:
          name: build-serf
          container-image: serf
      - build:
          name: build-squid
          container-image: squid
      - build:
          name: build-teleport-node
          container-image: teleport-node
      - build:
          name: build-tempo
          container-image: tempo
      - build:
          name: build-testhttpd
          container-image: testhttpd
      - build:
          name: build-unbound
          container-image: unbound
      - build:
          name: build-unbound_exporter
          container-image: unbound_exporter
      - build:
          name: build-vault
          container-image: vault
      - build:
          name: build-victoriametrics-operator
          container-image: victoriametrics-operator
      - build:
          name: build-victoriametrics
          container-image: victoriametrics
          targets: vmsingle vmagent vmalert vmbackup vmrestore vmctl vminsert vmselect vmstorage
