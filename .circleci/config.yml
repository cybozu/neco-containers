version: 2.1
jobs:
  test:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      directory:
        type: string
      go-image-tag:
        type: string
        default: "1.21-jammy"
    description: "test at << parameters.directory >>"
    docker:
      - image: quay.io/cybozu/golang:<<parameters.go-image-tag>>
      - image: quay.io/cybozu/etcd:3.5.7.1
    working_directory: /work
    steps:
      - checkout
      - run: apt-get update
      - run: make -C << parameters.directory >> check-generate SUDO=
      - run: make -C << parameters.directory >> test SUDO=
  build:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      container-image:
        type: string
      dir:
        type: string
        default: ""
      attach:
        type: boolean
        default: false
      targets:
        type: string
        default: ""
      resource-class:
        type: string
        default: medium
      scan:
        type: boolean
        default: false
    description: "build << parameters.container-image >>"
    working_directory: /app
    docker:
      - image: docker:stable
    resource_class: << parameters.resource-class >>
    steps:
      - run:
          name: Install tools
          command: |
            apk add --no-cache curl jq git
      - checkout
      - when:
          condition: << parameters.attach >>
          steps:
            - attach_workspace:
                at: /app/<< parameters.dir >>/workspace
      - setup_remote_docker
      - run:
          name: Check TAG files
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            image=<< parameters.container-image >>
            targets="<< parameters.targets >>"
            if [ "$targets" != "" ]; then
              for target in $targets; do break; done # get first element
              image=$image-$target
            fi
            c="$(./tag_exists $image $dir)"
            if [ "$c" = ng ]; then
                echo << parameters.container-image >> > BUILDS
            fi
      - run:
          name: Validate consistency between BRANCH and TAG
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            if [ -e "$dir/NO_TAG_BRANCH_CONSISTENCY" ]; then exit 0; fi
            ./tag_branch_consistency $dir
      - run:
          name: Build images
          no_output_timeout: 20m
          command: |
            if [ ! -f BUILDS ]; then
                echo "no need to build << parameters.container-image >>."
                exit 0
            fi
            echo "building << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker build -t quay.io/cybozu/<< parameters.container-image >>:latest $dir
            targets="<< parameters.targets >>"
            if [ "$targets" != "" ]; then
              for target in $targets; do
                docker build -t quay.io/cybozu/<< parameters.container-image >>-$target:latest --target $target $dir
              done
            fi
            docker images
      - deploy:
          name: Push Docker image to Quay.io
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo
            echo "pushing << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            targets="<< parameters.targets >>"
            if [ "$targets" = "" ]; then
              images=<< parameters.container-image >>
            else
              images=
              for target in $targets; do
                images="$images << parameters.container-image >>-$target"
              done
            fi
            TAG=$(cat $dir/TAG)
            for image in $images; do
              docker tag quay.io/cybozu/$image:latest quay.io/cybozu/$image:$TAG
              docker push quay.io/cybozu/$image:$TAG
            done
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            for image in $images; do
              if [ -f $dir/BRANCH ]; then
                  BRANCH=$(cat $dir/BRANCH)
                  docker tag quay.io/cybozu/$image:$TAG quay.io/cybozu/$image:$BRANCH
                  docker push quay.io/cybozu/$image:$BRANCH
              fi
            done
      - when:
          condition: << parameters.scan >>
          steps:
            - run:
                name: Install Trivy
                command: |
                  curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            - run:
                name: Scan images
                command: |
                  if [ "${CIRCLE_BRANCH}" != "main" ]; then
                      exit 0
                  fi
                  if [ ! -f BUILDS ]; then
                      echo "no need to scan << parameters.container-image >>."
                      exit 0
                  fi
                  
                  dir=<< parameters.dir >>
                  if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
                  targets="<< parameters.targets >>"
                  if [ "$targets" = "" ]; then
                      images=<< parameters.container-image >>
                  else
                      images=
                      for target in $targets; do
                          images="$images << parameters.container-image >>-$target"
                      done
                  fi
                  TAG=$(cat $dir/TAG)
                  for image in $images; do
                      echo "scanning $image:$TAG ..."
                      YAMORY_IMAGE_IDENTIFIER="quay.io/cybozu/$image" YAMORY_IMAGE_NAME="quay.io/cybozu/$image:$TAG" sh -c "$(curl -sSf -L https://mw-receiver.yamory.io/image/script/trivy)"
                  done
  buildx:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      container-image:
        type: string
      dir:
        type: string
        default: ""
      attach:
        type: boolean
        default: false
      resource-class:
        type: string
        default: medium
    description: "build << parameters.container-image >>"
    docker:
      - image: cimg/base:current-20.04
    resource_class: << parameters.resource-class >>
    steps:
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y curl jq git
            CONTAINER_TAG_EXISTS_VERSION=1.0.3
            curl -fsSL -o container-tag-exists.tar.gz \
              https://github.com/Hsn723/container-tag-exists/releases/download/v${CONTAINER_TAG_EXISTS_VERSION}/container-tag-exists_${CONTAINER_TAG_EXISTS_VERSION}_linux_amd64.tar.gz
            sudo tar -xzf container-tag-exists.tar.gz -C /usr/local/bin
            rm -f container-tag-exists.tar.gz
            curl -LO https://storage.googleapis.com/container-structure-test/v1.14.0/container-structure-test-linux-amd64 \
              && chmod +x container-structure-test-linux-amd64 \
              && sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
      - checkout
      - when:
          condition: << parameters.attach >>
          steps:
            - attach_workspace:
                at: ./<< parameters.dir >>/workspace
      - setup_remote_docker:
          version: 20.10.18
      # The binfmt container image is not an official image, so we use a pinned version(qemu-v6.2.0).
      - run: docker run --rm --privileged tonistiigi/binfmt@sha256:5bf63a53ad6222538112b5ced0f1afb8509132773ea6dd3991a197464962854e --install linux/amd64,linux/arm64/v8
      - run:
          name: Check TAG files
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            image=<< parameters.container-image >>
            tag=$(cat ${dir}/TAG)
            c=$(container-tag-exists quay.io/cybozu/$image $tag 2>&1)
            # The stderr should be either "" or "found".
            # If the stderr was an error message other than "found", this step must have stopped due to the shell option "-e".
            if [ "$c" = "" ]; then
                echo quay.io/cybozu/$image >> BUILDS
            fi
      - run:
          name: Validate consistency between BRANCH and TAG
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            if [ -e "$dir/NO_TAG_BRANCH_CONSISTENCY" ]; then exit 0; fi
            ./tag_branch_consistency $dir
      - run:
          name: Test container structure
          command: |
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            image=<< parameters.container-image >>
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            if [ ! -e "$dir/container-structure-test.yaml" ]; then exit 0; fi
            echo "testing container structure: << parameters.container-image >> ..."
            TAG=$(cat $dir/TAG)
            for platform in linux/amd64 linux/arm64/v8; do
              docker context create structure
              docker buildx create structure --use
              docker buildx build \
                --progress plain \
                --load \
                --platform $platform \
                -t quay.io/cybozu/$image:$TAG \
                ${dir}
              container-structure-test test \
                --image quay.io/cybozu/$image:$TAG \
                --config ${dir}/container-structure-test.yaml
              docker buildx rm
              docker context rm structure
            done
      - run:
          name: Build test
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            echo "building test: << parameters.container-image >> ..."
            image=<< parameters.container-image >>
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker context create buildx
            docker buildx create buildx --use
            docker buildx build \
              --progress plain \
              --platform linux/amd64,linux/arm64/v8 \
              -o type=tar,dest=$image.tar \
              ${dir}
      - run:
          name: Build and Push
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo
            echo "building and pushing << parameters.container-image >> ..."
            image=<< parameters.container-image >>
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            TAG=$(cat $dir/TAG)
            if [ -f $dir/BRANCH ]; then
              if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
              else
                BRANCH=$(cat $dir/BRANCH)
                BRANCH_TAG_OPTION="-t quay.io/cybozu/$image:$BRANCH"
              fi
            fi
            docker context create buildx
            docker buildx create buildx --use
            docker buildx build \
              --progress plain \
              --push \
              --platform linux/amd64,linux/arm64/v8 \
              -t quay.io/cybozu/$image:$TAG \
              ${BRANCH_TAG_OPTION} \
              ${dir}
  build-ceph:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:22.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            ceph_tag_exists="$(./tag_exists ceph)"
            if [ "$ceph_tag_exists" = ng ]; then
                echo ceph > BUILDS
            fi
      - run:
          name: Build Ceph packages
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
              # fake for the next step
              cd src/workspace
              touch COPYING
              exit 0
            fi
            ceph/build.sh << parameters.version >>
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-envoy:
    parameters:
      version:
        type: string
      bazel-version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:20.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists envoy)"
            if [ "$c" = ng ]; then
                echo envoy > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install build-essential \
              libtool \
              cmake \
              automake \
              autoconf \
              make \
              ninja-build \
              curl \
              unzip \
              virtualenv \
              zlib1g-dev
            ln -s $(which python3) /usr/local/bin/python
      - run:
          name: Install Bazel
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -o /tmp/bazel.deb -sLf https://github.com/bazelbuild/bazel/releases/download/<< parameters.bazel-version >>/bazel_<< parameters.bazel-version >>-linux-x86_64.deb
            dpkg -i /tmp/bazel.deb
            rm -f /tmp/bazel.deb
      - run:
          name: Build envoy
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch envoy LICENSE docker-entrypoint.sh
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> https://github.com/envoyproxy/envoy
            curl -o /tmp/clang.tar.xz -sLf https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz
            mkdir llvm
            tar -C llvm --strip-components=1 --no-same-owner -xf /tmp/clang.tar.xz
            cd envoy
            bazel/setup_clang.sh $(pwd)/../llvm
            echo "build --config=clang" >> user.bazelrc
            sed -i s/envoy_dependencies_extra\(\)/envoy_dependencies_extra\(ignore_root_user_error=True\)/ WORKSPACE
            bazel --bazelrc=/dev/null build --jobs=20 -c opt //source/exe:envoy-static.stripped
            mv bazel-bin/source/exe/envoy-static.stripped ../workspace/envoy
            mv LICENSE ../workspace
            mv ci/docker-entrypoint.sh ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"

workflows:
  main:
    jobs:
      - test:
          name: test-envoy
          directory: envoy
      - build:
          name: build-argocd
          container-image: argocd
      - build:
          name: build-bird
          container-image: bird
      - build:
          name: build-blackbox_exporter
          container-image: blackbox_exporter
      - build-ceph:
          version: 18.2.1
      - build:
          name: build-ceph-container
          container-image: ceph
          attach: true
          dir: ceph
          requires:
            - build-ceph
      - build:
          name: build-ceph-extra-exporter
          container-image: ceph-extra-exporter
      - build:
          name: build-cephcsi
          container-image: cephcsi
      - build:
          name: build-chrony
          container-image: chrony
      - build:
          name: build-csi-attacher
          container-image: csi-attacher
      - build:
          name: build-csi-node-driver-registrar
          container-image: csi-node-driver-registrar
      - build:
          name: build-csi-provisioner
          container-image: csi-provisioner
      - build:
          name: build-csi-resizer
          container-image: csi-resizer
      - build:
          name: build-csi-snapshotter
          container-image: csi-snapshotter
      - build:
          name: build-dex
          container-image: dex
      - build-envoy:
          version: 1.28.0
          bazel-version: 6.3.2
      - build:
          name: build-envoy-container
          container-image: envoy
          attach: true
          dir: envoy
          requires:
            - build-envoy
      - buildx:
          name: build-golang-1.20-focal
          container-image: golang
          dir: golang-all/golang-1.20-focal
      - buildx:
          name: build-golang-1.20-jammy
          container-image: golang
          dir: golang-all/golang-1.20-jammy
      - buildx:
          name: build-golang-1.21-focal
          container-image: golang
          dir: golang-all/golang-1.21-focal
      - buildx:
          name: build-golang-1.21-jammy
          container-image: golang
          dir: golang-all/golang-1.21-jammy
      - build:
          name: build-gorush
          container-image: gorush
      - build:
          name: build-go-ipfs
          container-image: go-ipfs
      - build:
          name: build-grafana
          container-image: grafana
          resource-class: large
          scan: true
      - build:
          name: build-grafana_plugins_init
          container-image: grafana_plugins_init
          scan: true
      - build:
          name: build-grafana-operator
          container-image: grafana-operator
      - build:
          name: build-heartbeat
          container-image: heartbeat
          scan: true
      - build:
          name: build-ipfs-cluster
          container-image: ipfs-cluster
      - build:
          name: build-kube-storage-version-migrator
          container-image: storage-version-migration
          dir: kube-storage-version-migrator
          targets: initializer migrator trigger
      - build:
          name: build-local-pv-provisioner
          container-image: local-pv-provisioner
      - build:
          name: build-loki
          container-image: loki
      - build:
          name: build-meows-dctest-runner
          container-image: meows-dctest-runner
          scan: true
      - build:
          name: build-meows-neco-runner
          container-image: meows-neco-runner
      - build:
          name: build-moco-switchover-downtime-monitor
          container-image: moco-switchover-downtime-monitor
      - build:
          name: build-nerdctl
          container-image: nerdctl
      - build:
          name: build-opentelemetry-collector
          container-image: opentelemetry-collector
      - build:
          name: build-prometheus-adapter
          container-image: prometheus-adapter
      - build:
          name: build-promtail
          container-image: promtail
      - build:
          name: build-promtail-debug
          container-image: promtail-debug
      - build:
          name: build-pushgateway
          container-image: pushgateway
      - build:
          name: build-redis
          container-image: redis
      - build:
          name: build-rook
          container-image: rook
      - build:
          name: build-s3gw
          container-image: s3gw
      - build:
          name: build-serf
          container-image: serf
          scan: true
      - build:
          name: build-squid
          container-image: squid
          scan: true
      - build:
          name: build-testhttpd
          container-image: testhttpd
      - build:
          name: build-unbound
          container-image: unbound
      - build:
          name: build-vault
          container-image: vault
