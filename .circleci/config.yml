version: 2.1
jobs:
  build:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      container-image:
        type: string
      dir:
        type: string
        default: ""
      attach:
        type: boolean
        default: false
    description: "build << parameters.container-image >>"
    working_directory: /app
    docker:
      - image: docker:stable
    steps:
      - checkout
      - when:
          condition: << parameters.attach >>
          steps:
            - attach_workspace:
                at: /app/<< parameters.dir >>/workspace
      - setup_remote_docker
      - run:
          name: Install tools
          command: |
            apk add --no-cache curl jq
      - run:
          name: Check TAG files
          command: |
            c="$(./tag_exists << parameters.container-image >> << parameters.dir >>)"
            if [ "$c" = ng ]; then
                echo << parameters.container-image >> > BUILDS
            fi
      - run:
          name: Lint Dockerfile
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker run --rm -i hadolint/hadolint /bin/hadolint - --ignore DL3008 --ignore DL3016 < $dir/Dockerfile
      - run:
          name: Build images
          command: |
            if [ ! -f BUILDS ]; then
                echo "no need to build << parameters.container-image >>."
                exit 0
            fi
            echo "building << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker build -t quay.io/cybozu/<< parameters.container-image >>:latest $dir
      - deploy:
          name: Push Docker image to Quay.io
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo
            echo "pushing << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            TAG=$(cat $dir/TAG)
            docker tag quay.io/cybozu/<< parameters.container-image >>:latest quay.io/cybozu/<< parameters.container-image >>:$TAG
            docker push quay.io/cybozu/<< parameters.container-image >>:$TAG
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            if [ -f $dir/BRANCH ]; then
                BRANCH=$(cat $dir/BRANCH)
                docker tag quay.io/cybozu/<< parameters.container-image >>:$TAG quay.io/cybozu/<< parameters.container-image >>:$BRANCH
                docker push quay.io/cybozu/<< parameters.container-image >>:$BRANCH
            fi
  build-go-sources:
    parameters:
      directory:
        type: string
    description: "build Go sources at << parameters.directory >>"
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
      - image: quay.io/coreos/etcd:v3.3
    working_directory: /work
    steps:
      - checkout
      - run:
          command: |
            cd << parameters.directory >>
            test -z "$(gofmt -s -l . | grep -v '^vendor' | tee /dev/stderr)"
            golint -set_exit_status $(go list -mod=vendor ./... | grep -v /vendor/)
            go build -mod=vendor -o /dev/null ./...
            go test -mod=vendor -race -v ./...
            go vet -mod=vendor ./...
            ineffassign .
  scripts-cke-tools:
    docker:
      - image: quay.io/cybozu/ubuntu-dev:18.04
    steps:
      - checkout
      - run: apt-get update
      - run: cd cke-tools/src/scripts; make setup SUDO=
      - run: cd cke-tools/src/scripts; make
  build-envoy:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists envoy)"
            if [ "$c" = ng ]; then
                echo envoy > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install default-jdk gpg libtool cmake clang-format-6.0 \
                automake autoconf ninja-build zip unzip pkg-config virtualenv \
                zlib1g-dev bash-completion python
            ln -s /usr/lib/jvm/default-java /usr/local/java
      - run:
          name: Install buildifier
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            go get -u github.com/bazelbuild/buildtools/buildifier
      - run:
          name: Install Bazel
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -fsL -o /tmp/bazel.deb https://storage.googleapis.com/bazel-apt/pool/jdk1.8/b/bazel/bazel_0.28.1_amd64.deb
            dpkg -i /tmp/bazel.deb
            rm -f /tmp/bazel.deb
      - run:
          name: Build envoy
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch envoy LICENSE docker-entrypoint.sh
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> https://github.com/envoyproxy/envoy
            cd envoy
            bazel build --jobs 8 --cxxopt=-DMEMORY_TEST_EXACT=1 -c opt //source/exe:envoy-static
            strip --strip-debug bazel-bin/source/exe/envoy-static
            mv bazel-bin/source/exe/envoy-static ../workspace/envoy
            mv LICENSE ../workspace
            mv ci/docker-entrypoint.sh ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-cert-manager:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists cert-manager)"
            if [ "$c" = ng ]; then
                echo cert-manager > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install unzip pkg-config zlib1g-dev python
      - run:
          name: Install Bazel
          environment:
            BAZEL_VERSION: 1.1.0
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -o /tmp/bazel.deb -fsSL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb
            dpkg -i /tmp/bazel.deb
            rm -f /tmp/bazel.deb
      - run:
          name: Build cert-manager
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch cainjector controller webhook LICENSE
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> https://github.com/jetstack/cert-manager
            cd cert-manager
            make cainjector controller webhook
            mv bazel-bin/cmd/cainjector/linux_amd64_pure_stripped/cainjector ../workspace
            mv bazel-bin/cmd/controller/linux_amd64_pure_stripped/controller ../workspace
            mv bazel-bin/cmd/webhook/linux_amd64_pure_stripped/webhook ../workspace
            mv LICENSE ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-admission:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    steps:
      - checkout
      - run: cd admission; make setup SUDO=
      - run: cd admission; make test
      - run: cd admission; make build
      - persist_to_workspace:
          root: admission/bin
          paths:
            - neco-admission

workflows:
  main:
    jobs:
      - scripts-cke-tools
      - build-go-sources:
          name: build-go-sources-cke-tools
          directory: cke-tools/src
      - build-go-sources:
          name: build-go-sources-testhttpd
          directory: testhttpd/src
      - build-go-sources:
          name: build-go-sources-machines-endpoints
          directory: machines-endpoints
      - build-go-sources:
          name: build-go-sources-restrictpkg
          directory: golang/restrictpkg
      - build:
          name: build-argocd
          container-image: argocd
      - build:
          name: build-bird
          container-image: bird
      - build:
          name: build-calico
          container-image: calico
      - build-cert-manager:
          version: 0.11.1
      - build:
          name: build-cert-manager-container
          container-image: cert-manager
          attach: true
          dir: cert-manager
          requires:
            - build-cert-manager
      - build:
          name: build-chrony
          container-image: chrony
      - build:
          name: build-cke-tools
          container-image: cke-tools
      - build:
          name: buiild-contour
          container-image: contour
      - build:
          name: build-coredns
          container-image: coredns
      - build:
          name: build-dex
          container-image: dex
      - build:
          name: build-dnsmasq
          container-image: dnsmasq
      - build-envoy:
          version: 1.11.1
      - build:
          name: build-envoy-container
          container-image: envoy
          attach: true
          dir: envoy
          requires:
            - build-envoy
      - build:
          name: build-etcd
          container-image: etcd
      - build:
          name: build-external-dns
          container-image: external-dns
      - build:
          name: build-gatekeeper
          container-image: gatekeeper
      - build:
          name: build-golang
          container-image: golang
      - build:
          name: build-grafana
          container-image: grafana
      - build:
          name: build-hyperkube
          container-image: hyperkube
      - build:
          name: build-kind-node
          container-image: kind-node
      - build:
          name: build-kube-state-metrics
          container-image: kube-state-metrics
      - build:
          name: build-machines-endpoints
          container-image: machines-endpoints
      - build:
          name: build-metallb
          container-image: metallb
      - build:
          name: build-pause
          container-image: pause
      - build:
          name: build-prometheus
          container-image: prometheus
      - build:
          name: build-redis
          container-image: redis
      - build:
          name: build-serf
          container-image: serf
      - build:
          name: build-squid
          container-image: squid
      - build:
          name: build-teleport
          container-image: teleport
      - build:
          name: build-testhttpd
          container-image: testhttpd
      - build:
          name: build-unbound
          container-image: unbound
      - build-admission
      - build:
          name: build-admission-image
          container-image: neco-admission
          dir: admission
          attach: true
          requires:
            - build-admission
      - build:
          name: build-gorush
          container-image: gorush
